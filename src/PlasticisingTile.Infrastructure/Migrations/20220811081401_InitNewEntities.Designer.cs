// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlasticisingTile.Infrastructure.Data.DataContexts;

#nullable disable

namespace PlasticisingTile.Infrastructure.Migrations
{
    [DbContext(typeof(ConfigurationDataContext))]
    [Migration("20220811081401_InitNewEntities")]
    partial class InitNewEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetRoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataEncoderOptions")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<long>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("'Auto'");

                    b.Property<long>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<long>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Timezone")
                        .HasColumnType("TEXT");

                    b.Property<long>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("'SI'");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .HasColumnType("TEXT");

                    b.Property<long>("DefaultColor")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Deletable")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PositionedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentId" }, "IX_Colors_ParentId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Dashboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("'0001-01-01 00:00:00'");

                    b.Property<string>("EventArray")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<long>("IsSharedClone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long>("OriginalId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimestampArray")
                        .HasColumnType("TEXT");

                    b.Property<long?>("WorkShiftId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentId" }, "IX_Dashboards_ParentId");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Datasource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelHeader")
                        .HasColumnType("TEXT");

                    b.Property<long>("ConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("DatPathFrom")
                        .HasColumnType("TEXT");

                    b.Property<long>("DatPathReplace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatPathTo")
                        .HasColumnType("TEXT");

                    b.Property<long>("DisplayOnlyFileNames")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DownloadableCsvPaths")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DownloadableParquetPaths")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DownloadablePdfPaths")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DownloadableZipPaths")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogTomcolumn")
                        .HasColumnType("TEXT")
                        .HasColumnName("LogTOMColumn");

                    b.Property<string>("LogUomcolumn")
                        .HasColumnType("TEXT")
                        .HasColumnName("LogUOMColumn");

                    b.Property<long>("LogUserUpdates")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PdfPathFrom")
                        .HasColumnType("TEXT");

                    b.Property<long>("PdfPathReplace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PdfPathTo")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReferenceDatasourceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceIdentColumnKey")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReferenceLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceReadingMode")
                        .HasColumnType("TEXT");

                    b.Property<long>("SegmentDataAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Segments")
                        .HasColumnType("TEXT");

                    b.Property<string>("TableOrStoreName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimestampColumnName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Timezone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ConnectionId" }, "IX_Datasources_ConnectionId");

                    b.HasIndex(new[] { "ReferenceDatasourceId" }, "IX_Datasources_ReferenceDatasourceId");

                    b.ToTable("Datasources");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.DatasourceColumn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccessLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorCode")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DatasourceDataLevel")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DatasourceId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DatasourceReadingMode")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DecimalPlaces")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DatasourceId" }, "IX_DatasourceColumns_DatasourceId");

                    b.ToTable("DatasourceColumns");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.DatasourceConnection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("TEXT");

                    b.Property<long?>("HdServicePort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Host")
                        .HasColumnType("TEXT");

                    b.Property<long>("IntegratedSecurity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Method")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("'Manual'");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<long>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Realm")
                        .HasColumnType("TEXT");

                    b.Property<string>("TlsCertificate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DatasourceConnections");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Filter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActiveMarks")
                        .HasColumnType("TEXT");

                    b.Property<long?>("BoolValue")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DashboardId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DatasourceId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EndEventId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FileCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("IsRelative")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeftInclusive")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double?>("NumEnd")
                        .HasColumnType("REAL");

                    b.Property<string>("NumMultiEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumMultiStart")
                        .HasColumnType("TEXT");

                    b.Property<double?>("NumStart")
                        .HasColumnType("REAL");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceData")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelativeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RightInclusive")
                        .HasColumnType("TEXT");

                    b.Property<long?>("StartEventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StrValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TileId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimestampEnd")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimestampStart")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkShiftEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkShiftStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.HasIndex("DatasourceId");

                    b.HasIndex("ParentId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Folder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentId" }, "IX_Folders_ParentId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewAxis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("AutoScale")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AxisType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorTileId")
                        .HasColumnType("TEXT");

                    b.Property<long>("DataType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.Property<string>("XtileId")
                        .HasColumnType("TEXT")
                        .HasColumnName("XTileId");

                    b.Property<string>("YtileId")
                        .HasColumnType("TEXT")
                        .HasColumnName("YTileId");

                    b.Property<string>("ZtileId")
                        .HasColumnType("TEXT")
                        .HasColumnName("ZTileId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ColorTileId" }, "IX_NewAxes_ColorTileId");

                    b.HasIndex(new[] { "XtileId" }, "IX_NewAxes_XTileId");

                    b.HasIndex(new[] { "YtileId" }, "IX_NewAxes_YTileId");

                    b.HasIndex(new[] { "ZtileId" }, "IX_NewAxes_ZTileId");

                    b.ToTable("NewAxes");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewAxisSignal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaxAxisId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MinAxisId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MaxAxisId" }, "IX_NewAxisSignals_MaxAxisId");

                    b.HasIndex(new[] { "MinAxisId" }, "IX_NewAxisSignals_MinAxisId");

                    b.HasIndex(new[] { "SignalId" }, "IX_NewAxisSignals_SignalId");

                    b.ToTable("NewAxisSignals");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewDatasource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("DatasourceDiscriminator")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentId" }, "IX_NewDatasources_ParentId");

                    b.ToTable("NewDatasources");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewFilter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DashboardId")
                        .HasColumnType("TEXT");

                    b.Property<long>("Editable")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EditableFilterDiscriminator")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FilterDiscriminator")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Global")
                        .HasColumnType("INTEGER");

                    b.Property<string>("High")
                        .HasColumnType("TEXT");

                    b.Property<long?>("IncludeHigh")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("IncludeLow")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Low")
                        .HasColumnType("TEXT");

                    b.Property<double?>("NumberBetweenFilterHigh")
                        .HasColumnType("REAL")
                        .HasColumnName("NumberBetweenFilter_High");

                    b.Property<long?>("NumberBetweenFilterIncludeHigh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NumberBetweenFilter_IncludeHigh");

                    b.Property<long?>("NumberBetweenFilterIncludeLow")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NumberBetweenFilter_IncludeLow");

                    b.Property<double?>("NumberBetweenFilterLow")
                        .HasColumnType("REAL")
                        .HasColumnName("NumberBetweenFilter_Low");

                    b.Property<long?>("OrFilterEditableFilterDiscriminator")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrFilter_EditableFilterDiscriminator");

                    b.Property<string>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Relative")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelativeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignalId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("StartTriggerRisingEdge")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartTriggerSignalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StopTriggerSignalId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("StopriggerRisingEdge")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringContainsFilterValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("StringContainsFilter_Value");

                    b.Property<string>("StringEqFilterValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("StringEqFilter_Value");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("TileId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Value")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkShiftFilterHigh")
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkShiftFilter_High");

                    b.Property<long?>("WorkShiftFilterIncludeHigh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("WorkShiftFilter_IncludeHigh");

                    b.Property<long?>("WorkShiftFilterIncludeLow")
                        .HasColumnType("INTEGER")
                        .HasColumnName("WorkShiftFilter_IncludeLow");

                    b.Property<string>("WorkShiftFilterLow")
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkShiftFilter_Low");

                    b.Property<long?>("XrangeFilterHigh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("XRangeFilter_High");

                    b.Property<long?>("XrangeFilterLow")
                        .HasColumnType("INTEGER")
                        .HasColumnName("XRangeFilter_Low");

                    b.Property<long?>("Xtype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("XType");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DashboardId" }, "IX_NewFilters_DashboardId");

                    b.HasIndex(new[] { "ParentId" }, "IX_NewFilters_ParentId");

                    b.HasIndex(new[] { "SignalId" }, "IX_NewFilters_SignalId");

                    b.HasIndex(new[] { "StartTriggerSignalId" }, "IX_NewFilters_StartTriggerSignalId");

                    b.HasIndex(new[] { "StopTriggerSignalId" }, "IX_NewFilters_StopTriggerSignalId");

                    b.HasIndex(new[] { "TileId" }, "IX_NewFilters_TileId");

                    b.ToTable("NewFilters");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewFolderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Access")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DerivedImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventArray")
                        .HasColumnType("TEXT");

                    b.Property<long>("FolderItemDiscriminator")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<long?>("IsSharedClone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimestampArray")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NewFolderItems");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Advanced")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alias")
                        .HasColumnType("TEXT");

                    b.Property<long?>("BoolConstantSignalValue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BoolConstantSignal_Value");

                    b.Property<string>("ColorCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment2")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DataType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatasourceId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DecimalPlaces")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Expression")
                        .HasColumnType("TEXT");

                    b.Property<string>("FunctionName")
                        .HasColumnType("TEXT");

                    b.Property<long>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("Ordinal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<long>("SignalGroupItemDiscriminator")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SignalGroupType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SignalParentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Signal_ParentId");

                    b.Property<string>("StringConstantSignalValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("StringConstantSignal_Value");

                    b.Property<long>("System")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Updatable")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Value")
                        .HasColumnType("REAL");

                    b.Property<long?>("Xtype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("XType");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DatasourceId" }, "IX_NewSignalGroupItems_DatasourceId");

                    b.HasIndex(new[] { "ParentId" }, "IX_NewSignalGroupItems_ParentId");

                    b.HasIndex(new[] { "SignalParentId" }, "IX_NewSignalGroupItems_Signal_ParentId");

                    b.HasIndex(new[] { "TileId" }, "IX_NewSignalGroupItems_TileId");

                    b.ToTable("NewSignalGroupItems");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupSignal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignalGroupId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SignalGroupId" }, "IX_NewSignalGroupSignals_SignalGroupId");

                    b.HasIndex(new[] { "SignalId" }, "IX_NewSignalGroupSignals_SignalId");

                    b.ToTable("NewSignalGroupSignals");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long?>("AbsoluteRanges")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AggregationType")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BarTileAggregationType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BarTile_AggregationType");

                    b.Property<long?>("BarTileCategoryLimit")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BarTile_CategoryLimit");

                    b.Property<long?>("BarTileShowLegendOnDashboard")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BarTile_ShowLegendOnDashboard");

                    b.Property<long?>("BarTileShowOthersCategory")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BarTile_ShowOthersCategory");

                    b.Property<long?>("BarTileSortMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BarTile_SortMode");

                    b.Property<long?>("BulletTileShowLegendOnDashboard")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BulletTile_ShowLegendOnDashboard");

                    b.Property<long?>("CategoryLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheckboxPosition")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorLimits")
                        .HasColumnType("TEXT");

                    b.Property<long>("CursorLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DashboardId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("DirectPrint")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DownloadableDat")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DownloadableHdq")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DownloadablePdf")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("GaugeTileAggregationType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GaugeTile_AggregationType");

                    b.Property<long?>("GaugeTileShowLegendOnDashboard")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GaugeTile_ShowLegendOnDashboard");

                    b.Property<long>("H")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("PercentageMode")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RowLimit")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ScatterTileShowLegendOnDashboard")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ScatterTile_ShowLegendOnDashboard");

                    b.Property<long?>("ShowInSequentialOrder")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ShowLastValue")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ShowLegendOnDashboard")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ShowOthersCategory")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SortMode")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StackedMode")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TileDiscriminator")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UniformFont")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueColors")
                        .HasColumnType("TEXT");

                    b.Property<long>("W")
                        .HasColumnType("INTEGER");

                    b.Property<long>("X")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Xtype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("XType");

                    b.Property<long>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DashboardId" }, "IX_NewTiles_DashboardId");

                    b.ToTable("NewTiles");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewTileDatasource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DatasourceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DatasourceId" }, "IX_NewTileDatasources_DatasourceId");

                    b.HasIndex(new[] { "TileId" }, "IX_NewTileDatasources_TileId");

                    b.ToTable("NewTileDatasources");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewTileSignal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<long?>("AggregationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryTileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorAxisId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorId")
                        .HasColumnType("TEXT");

                    b.Property<long>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentTileId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("OrderDirection")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderTileId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceTileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SelectedTileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("XaxisId")
                        .HasColumnType("TEXT")
                        .HasColumnName("XAxisId");

                    b.Property<string>("YaxisId")
                        .HasColumnType("TEXT")
                        .HasColumnName("YAxisId");

                    b.Property<string>("ZaxisId")
                        .HasColumnType("TEXT")
                        .HasColumnName("ZAxisId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryTileId" }, "IX_NewTileSignals_CategoryTileId");

                    b.HasIndex(new[] { "ColorAxisId" }, "IX_NewTileSignals_ColorAxisId");

                    b.HasIndex(new[] { "IdentTileId" }, "IX_NewTileSignals_IdentTileId");

                    b.HasIndex(new[] { "OrderTileId" }, "IX_NewTileSignals_OrderTileId");

                    b.HasIndex(new[] { "ReferenceTileId" }, "IX_NewTileSignals_ReferenceTileId");

                    b.HasIndex(new[] { "SelectedTileId" }, "IX_NewTileSignals_SelectedTileId");

                    b.HasIndex(new[] { "SignalId" }, "IX_NewTileSignals_SignalId");

                    b.HasIndex(new[] { "XaxisId" }, "IX_NewTileSignals_XAxisId");

                    b.HasIndex(new[] { "YaxisId" }, "IX_NewTileSignals_YAxisId");

                    b.HasIndex(new[] { "ZaxisId" }, "IX_NewTileSignals_ZAxisId");

                    b.ToTable("NewTileSignals");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetRoleClaim", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUserClaim", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUserLogin", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUserToken", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Color", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.Color", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Dashboard", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.Folder", "Parent")
                        .WithMany("Dashboards")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Datasource", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.DatasourceConnection", "Connection")
                        .WithMany("Datasources")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.Datasource", "ReferenceDatasource")
                        .WithMany("InverseReferenceDatasource")
                        .HasForeignKey("ReferenceDatasourceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Connection");

                    b.Navigation("ReferenceDatasource");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.DatasourceColumn", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.Datasource", "Datasource")
                        .WithMany("DatasourceColumns")
                        .HasForeignKey("DatasourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Datasource");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Filter", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.Dashboard", "Dashboard")
                        .WithMany("Filters")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.Datasource", "Datasource")
                        .WithMany("Filters")
                        .HasForeignKey("DatasourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.Filter", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Dashboard");

                    b.Navigation("Datasource");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Folder", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.Folder", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewAxis", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "ColorTile")
                        .WithMany("NewAxisColorTiles")
                        .HasForeignKey("ColorTileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "Xtile")
                        .WithMany("NewAxisXtiles")
                        .HasForeignKey("XtileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "Ytile")
                        .WithMany("NewAxisYtiles")
                        .HasForeignKey("YtileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "Ztile")
                        .WithMany("NewAxisZtiles")
                        .HasForeignKey("ZtileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ColorTile");

                    b.Navigation("Xtile");

                    b.Navigation("Ytile");

                    b.Navigation("Ztile");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewAxisSignal", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewAxis", "MaxAxis")
                        .WithMany("NewAxisSignalMaxAxes")
                        .HasForeignKey("MaxAxisId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewAxis", "MinAxis")
                        .WithMany("NewAxisSignalMinAxes")
                        .HasForeignKey("MinAxisId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", "Signal")
                        .WithMany("NewAxisSignals")
                        .HasForeignKey("SignalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaxAxis");

                    b.Navigation("MinAxis");

                    b.Navigation("Signal");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewDatasource", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewDatasource", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewFilter", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewFolderItem", "Dashboard")
                        .WithMany("NewFilters")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewFilter", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", "Signal")
                        .WithMany("NewFilterSignals")
                        .HasForeignKey("SignalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", "StartTriggerSignal")
                        .WithMany("NewFilterStartTriggerSignals")
                        .HasForeignKey("StartTriggerSignalId");

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", "StopTriggerSignal")
                        .WithMany("NewFilterStopTriggerSignals")
                        .HasForeignKey("StopTriggerSignalId");

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "Tile")
                        .WithMany("NewFilters")
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Dashboard");

                    b.Navigation("Parent");

                    b.Navigation("Signal");

                    b.Navigation("StartTriggerSignal");

                    b.Navigation("StopTriggerSignal");

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewDatasource", "Datasource")
                        .WithMany("NewSignalGroupItems")
                        .HasForeignKey("DatasourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", "SignalParent")
                        .WithMany("InverseSignalParent")
                        .HasForeignKey("SignalParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "Tile")
                        .WithMany("NewSignalGroupItems")
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Datasource");

                    b.Navigation("Parent");

                    b.Navigation("SignalParent");

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupSignal", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", "SignalGroup")
                        .WithMany("NewSignalGroupSignalSignalGroups")
                        .HasForeignKey("SignalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", "Signal")
                        .WithMany("NewSignalGroupSignalSignals")
                        .HasForeignKey("SignalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signal");

                    b.Navigation("SignalGroup");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewFolderItem", "Dashboard")
                        .WithMany("NewTiles")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dashboard");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewTileDatasource", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewDatasource", "Datasource")
                        .WithMany("NewTileDatasources")
                        .HasForeignKey("DatasourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "Tile")
                        .WithMany("NewTileDatasources")
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Datasource");

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewTileSignal", b =>
                {
                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "CategoryTile")
                        .WithMany("NewTileSignalCategoryTiles")
                        .HasForeignKey("CategoryTileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewAxis", "ColorAxis")
                        .WithMany("NewTileSignalColorAxes")
                        .HasForeignKey("ColorAxisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "IdentTile")
                        .WithMany("NewTileSignalIdentTiles")
                        .HasForeignKey("IdentTileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "OrderTile")
                        .WithMany("NewTileSignalOrderTiles")
                        .HasForeignKey("OrderTileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "ReferenceTile")
                        .WithMany("NewTileSignalReferenceTiles")
                        .HasForeignKey("ReferenceTileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", "SelectedTile")
                        .WithMany("NewTileSignalSelectedTiles")
                        .HasForeignKey("SelectedTileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", "Signal")
                        .WithMany("NewTileSignals")
                        .HasForeignKey("SignalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewAxis", "Xaxis")
                        .WithMany("NewTileSignalXaxes")
                        .HasForeignKey("XaxisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewAxis", "Yaxis")
                        .WithMany("NewTileSignalYaxes")
                        .HasForeignKey("YaxisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PlasticisingTile.Core.Entities.ConfigurationData.NewAxis", "Zaxis")
                        .WithMany("NewTileSignalZaxes")
                        .HasForeignKey("ZaxisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CategoryTile");

                    b.Navigation("ColorAxis");

                    b.Navigation("IdentTile");

                    b.Navigation("OrderTile");

                    b.Navigation("ReferenceTile");

                    b.Navigation("SelectedTile");

                    b.Navigation("Signal");

                    b.Navigation("Xaxis");

                    b.Navigation("Yaxis");

                    b.Navigation("Zaxis");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Color", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Dashboard", b =>
                {
                    b.Navigation("Filters");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Datasource", b =>
                {
                    b.Navigation("DatasourceColumns");

                    b.Navigation("Filters");

                    b.Navigation("InverseReferenceDatasource");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.DatasourceConnection", b =>
                {
                    b.Navigation("Datasources");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Filter", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.Folder", b =>
                {
                    b.Navigation("Dashboards");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewAxis", b =>
                {
                    b.Navigation("NewAxisSignalMaxAxes");

                    b.Navigation("NewAxisSignalMinAxes");

                    b.Navigation("NewTileSignalColorAxes");

                    b.Navigation("NewTileSignalXaxes");

                    b.Navigation("NewTileSignalYaxes");

                    b.Navigation("NewTileSignalZaxes");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewDatasource", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("NewSignalGroupItems");

                    b.Navigation("NewTileDatasources");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewFilter", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewFolderItem", b =>
                {
                    b.Navigation("NewFilters");

                    b.Navigation("NewTiles");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewSignalGroupItem", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("InverseSignalParent");

                    b.Navigation("NewAxisSignals");

                    b.Navigation("NewFilterSignals");

                    b.Navigation("NewFilterStartTriggerSignals");

                    b.Navigation("NewFilterStopTriggerSignals");

                    b.Navigation("NewSignalGroupSignalSignalGroups");

                    b.Navigation("NewSignalGroupSignalSignals");

                    b.Navigation("NewTileSignals");
                });

            modelBuilder.Entity("PlasticisingTile.Core.Entities.ConfigurationData.NewTile", b =>
                {
                    b.Navigation("NewAxisColorTiles");

                    b.Navigation("NewAxisXtiles");

                    b.Navigation("NewAxisYtiles");

                    b.Navigation("NewAxisZtiles");

                    b.Navigation("NewFilters");

                    b.Navigation("NewSignalGroupItems");

                    b.Navigation("NewTileDatasources");

                    b.Navigation("NewTileSignalCategoryTiles");

                    b.Navigation("NewTileSignalIdentTiles");

                    b.Navigation("NewTileSignalOrderTiles");

                    b.Navigation("NewTileSignalReferenceTiles");

                    b.Navigation("NewTileSignalSelectedTiles");
                });
#pragma warning restore 612, 618
        }
    }
}
